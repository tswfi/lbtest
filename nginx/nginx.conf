# extract username from auth header for pinning
# auth data is in format:
# syt_UsernameB64_rndBase64_chksumB64
# and we want to isolate the UsernameB64 part for stickying the user
# to one backend worker

# extract username from token URL parameter
map $arg_access_token $token_from_arg {
  default   $arg_access_token;
  "~syt_(?<username>.*?)_.*"           $username;
}

map $http_authorization $proxy_username_label {
    # default to just passing back the whole header
    default                              $http_authorization;
    # try to extract username part from token header
    "~Bearer syt_(?<username>.*?)_.*"    $username;
    # if no auth-header exist, check if we can find something from URL parameter "access_token"
    # this adds support for old discouraged to use accesstoken delivery method
    # which is still marked as "must" to handle in Matrix v1.4
    ""                                   $token_from_arg;
}

upstream loadbalancer {

  # use the extracted username from auth header for hashing
  # fallback is the whole token as-is.
  hash $proxy_username_label consistent;

  server 172.17.0.1:5001 weight=6;
  server 172.17.0.1:5002 weight=4;
  server 172.17.0.1:5003 weight=1;
}

server {
  location / {
    proxy_pass http://loadbalancer;

    # just to help debugging in test script. Pass the extracted username
    # and upstream address back
    add_header  X-Upstream  $upstream_addr;
    add_header  X-Username  $proxy_username_label;
  }
}
